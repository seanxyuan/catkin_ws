// Generated by gencpp from file ros_essentials_cpp/MASTER.msg
// DO NOT EDIT!


#ifndef ROS_ESSENTIALS_CPP_MESSAGE_MASTER_H
#define ROS_ESSENTIALS_CPP_MESSAGE_MASTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_essentials_cpp
{
template <class ContainerAllocator>
struct MASTER_
{
  typedef MASTER_<ContainerAllocator> Type;

  MASTER_()
    : deliverySwitch(false)
    , hopperSwitch(false)
    , doserSwitch(false)
    , doserSpeed(0)
    , wettingSwitch(false)
    , mixerSwitch(false)
    , mixerSpeed(0)
    , pumpSwitch(false)
    , pumpRotarySpeed(0)
    , pumpUpDownSpeed(0)
    , eStop(false)
    , tower2Cart(false)
    , cart2Tower(false)
    , RoboClaw5PWM(0)
    , RoboClaw6PWM(0)  {
    }
  MASTER_(const ContainerAllocator& _alloc)
    : deliverySwitch(false)
    , hopperSwitch(false)
    , doserSwitch(false)
    , doserSpeed(0)
    , wettingSwitch(false)
    , mixerSwitch(false)
    , mixerSpeed(0)
    , pumpSwitch(false)
    , pumpRotarySpeed(0)
    , pumpUpDownSpeed(0)
    , eStop(false)
    , tower2Cart(false)
    , cart2Tower(false)
    , RoboClaw5PWM(0)
    , RoboClaw6PWM(0)  {
  (void)_alloc;
    }



   typedef uint8_t _deliverySwitch_type;
  _deliverySwitch_type deliverySwitch;

   typedef uint8_t _hopperSwitch_type;
  _hopperSwitch_type hopperSwitch;

   typedef uint8_t _doserSwitch_type;
  _doserSwitch_type doserSwitch;

   typedef int8_t _doserSpeed_type;
  _doserSpeed_type doserSpeed;

   typedef uint8_t _wettingSwitch_type;
  _wettingSwitch_type wettingSwitch;

   typedef uint8_t _mixerSwitch_type;
  _mixerSwitch_type mixerSwitch;

   typedef int8_t _mixerSpeed_type;
  _mixerSpeed_type mixerSpeed;

   typedef uint8_t _pumpSwitch_type;
  _pumpSwitch_type pumpSwitch;

   typedef int8_t _pumpRotarySpeed_type;
  _pumpRotarySpeed_type pumpRotarySpeed;

   typedef int8_t _pumpUpDownSpeed_type;
  _pumpUpDownSpeed_type pumpUpDownSpeed;

   typedef uint8_t _eStop_type;
  _eStop_type eStop;

   typedef uint8_t _tower2Cart_type;
  _tower2Cart_type tower2Cart;

   typedef uint8_t _cart2Tower_type;
  _cart2Tower_type cart2Tower;

   typedef int8_t _RoboClaw5PWM_type;
  _RoboClaw5PWM_type RoboClaw5PWM;

   typedef int8_t _RoboClaw6PWM_type;
  _RoboClaw6PWM_type RoboClaw6PWM;





  typedef boost::shared_ptr< ::ros_essentials_cpp::MASTER_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_essentials_cpp::MASTER_<ContainerAllocator> const> ConstPtr;

}; // struct MASTER_

typedef ::ros_essentials_cpp::MASTER_<std::allocator<void> > MASTER;

typedef boost::shared_ptr< ::ros_essentials_cpp::MASTER > MASTERPtr;
typedef boost::shared_ptr< ::ros_essentials_cpp::MASTER const> MASTERConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_essentials_cpp::MASTER_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_essentials_cpp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'ros_essentials_cpp': ['/home/xy/catkin_ws/src/ros_essentials_cpp/msg', '/home/xy/catkin_ws/devel/share/ros_essentials_cpp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_essentials_cpp::MASTER_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_essentials_cpp::MASTER_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_essentials_cpp::MASTER_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ac9cdd2ea8832f8ca133fdf7b19daac";
  }

  static const char* value(const ::ros_essentials_cpp::MASTER_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ac9cdd2ea8832f8ULL;
  static const uint64_t static_value2 = 0xca133fdf7b19daacULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_essentials_cpp/MASTER";
  }

  static const char* value(const ::ros_essentials_cpp::MASTER_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool deliverySwitch\n"
"bool hopperSwitch\n"
"bool doserSwitch\n"
"int8 doserSpeed\n"
"bool wettingSwitch\n"
"bool mixerSwitch\n"
"int8 mixerSpeed\n"
"bool pumpSwitch\n"
"int8 pumpRotarySpeed\n"
"int8 pumpUpDownSpeed\n"
"\n"
"bool eStop\n"
"bool tower2Cart\n"
"bool cart2Tower\n"
"int8 RoboClaw5PWM\n"
"int8 RoboClaw6PWM\n"
;
  }

  static const char* value(const ::ros_essentials_cpp::MASTER_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deliverySwitch);
      stream.next(m.hopperSwitch);
      stream.next(m.doserSwitch);
      stream.next(m.doserSpeed);
      stream.next(m.wettingSwitch);
      stream.next(m.mixerSwitch);
      stream.next(m.mixerSpeed);
      stream.next(m.pumpSwitch);
      stream.next(m.pumpRotarySpeed);
      stream.next(m.pumpUpDownSpeed);
      stream.next(m.eStop);
      stream.next(m.tower2Cart);
      stream.next(m.cart2Tower);
      stream.next(m.RoboClaw5PWM);
      stream.next(m.RoboClaw6PWM);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MASTER_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_essentials_cpp::MASTER_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_essentials_cpp::MASTER_<ContainerAllocator>& v)
  {
    s << indent << "deliverySwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.deliverySwitch);
    s << indent << "hopperSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hopperSwitch);
    s << indent << "doserSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.doserSwitch);
    s << indent << "doserSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.doserSpeed);
    s << indent << "wettingSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wettingSwitch);
    s << indent << "mixerSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mixerSwitch);
    s << indent << "mixerSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mixerSpeed);
    s << indent << "pumpSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pumpSwitch);
    s << indent << "pumpRotarySpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pumpRotarySpeed);
    s << indent << "pumpUpDownSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pumpUpDownSpeed);
    s << indent << "eStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eStop);
    s << indent << "tower2Cart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tower2Cart);
    s << indent << "cart2Tower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cart2Tower);
    s << indent << "RoboClaw5PWM: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw5PWM);
    s << indent << "RoboClaw6PWM: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw6PWM);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ESSENTIALS_CPP_MESSAGE_MASTER_H
