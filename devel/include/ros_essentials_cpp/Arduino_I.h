// Generated by gencpp from file ros_essentials_cpp/Arduino_I.msg
// DO NOT EDIT!


#ifndef ROS_ESSENTIALS_CPP_MESSAGE_ARDUINO_I_H
#define ROS_ESSENTIALS_CPP_MESSAGE_ARDUINO_I_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_essentials_cpp
{
template <class ContainerAllocator>
struct Arduino_I_
{
  typedef Arduino_I_<ContainerAllocator> Type;

  Arduino_I_()
    : relay1(false)
    , relay2(false)
    , relay3(false)
    , relay4(false)
    , relay5(false)
    , relay6(false)
    , relay7(false)
    , relay8(false)
    , RCServo1(false)
    , RCServo2(false)
    , RCServo3(false)
    , RCServo4(false)
    , RoboClaw1ASpeed(0)
    , RoboClaw1A_P(0)
    , RoboClaw1A_I(0)
    , RoboClaw1A_D(0)
    , RoboClaw1A_QPPS(0)
    , RoboClaw1BSpeed(0)
    , RoboClaw1B_P(0)
    , RoboClaw1B_I(0)
    , RoboClaw1B_D(0)
    , RoboClaw1B_QPPS(0)
    , RoboClaw2ASpeed(0)
    , RoboClaw2A_P(0)
    , RoboClaw2A_I(0)
    , RoboClaw2A_D(0)
    , RoboClaw2A_QPPS(0)
    , RoboClaw2BSpeed(0)
    , RoboClaw2B_P(0)
    , RoboClaw2B_I(0)
    , RoboClaw2B_D(0)
    , RoboClaw2B_QPPS(0)
    , RoboClaw3A_PWM(0)
    , RoboClaw3B_PWM(0)
    , RoboClaw4A_PWM(0)
    , RoboClaw4B_PWM(0)  {
    }
  Arduino_I_(const ContainerAllocator& _alloc)
    : relay1(false)
    , relay2(false)
    , relay3(false)
    , relay4(false)
    , relay5(false)
    , relay6(false)
    , relay7(false)
    , relay8(false)
    , RCServo1(false)
    , RCServo2(false)
    , RCServo3(false)
    , RCServo4(false)
    , RoboClaw1ASpeed(0)
    , RoboClaw1A_P(0)
    , RoboClaw1A_I(0)
    , RoboClaw1A_D(0)
    , RoboClaw1A_QPPS(0)
    , RoboClaw1BSpeed(0)
    , RoboClaw1B_P(0)
    , RoboClaw1B_I(0)
    , RoboClaw1B_D(0)
    , RoboClaw1B_QPPS(0)
    , RoboClaw2ASpeed(0)
    , RoboClaw2A_P(0)
    , RoboClaw2A_I(0)
    , RoboClaw2A_D(0)
    , RoboClaw2A_QPPS(0)
    , RoboClaw2BSpeed(0)
    , RoboClaw2B_P(0)
    , RoboClaw2B_I(0)
    , RoboClaw2B_D(0)
    , RoboClaw2B_QPPS(0)
    , RoboClaw3A_PWM(0)
    , RoboClaw3B_PWM(0)
    , RoboClaw4A_PWM(0)
    , RoboClaw4B_PWM(0)  {
  (void)_alloc;
    }



   typedef uint8_t _relay1_type;
  _relay1_type relay1;

   typedef uint8_t _relay2_type;
  _relay2_type relay2;

   typedef uint8_t _relay3_type;
  _relay3_type relay3;

   typedef uint8_t _relay4_type;
  _relay4_type relay4;

   typedef uint8_t _relay5_type;
  _relay5_type relay5;

   typedef uint8_t _relay6_type;
  _relay6_type relay6;

   typedef uint8_t _relay7_type;
  _relay7_type relay7;

   typedef uint8_t _relay8_type;
  _relay8_type relay8;

   typedef uint8_t _RCServo1_type;
  _RCServo1_type RCServo1;

   typedef uint8_t _RCServo2_type;
  _RCServo2_type RCServo2;

   typedef uint8_t _RCServo3_type;
  _RCServo3_type RCServo3;

   typedef uint8_t _RCServo4_type;
  _RCServo4_type RCServo4;

   typedef int8_t _RoboClaw1ASpeed_type;
  _RoboClaw1ASpeed_type RoboClaw1ASpeed;

   typedef int8_t _RoboClaw1A_P_type;
  _RoboClaw1A_P_type RoboClaw1A_P;

   typedef int8_t _RoboClaw1A_I_type;
  _RoboClaw1A_I_type RoboClaw1A_I;

   typedef int8_t _RoboClaw1A_D_type;
  _RoboClaw1A_D_type RoboClaw1A_D;

   typedef int8_t _RoboClaw1A_QPPS_type;
  _RoboClaw1A_QPPS_type RoboClaw1A_QPPS;

   typedef int8_t _RoboClaw1BSpeed_type;
  _RoboClaw1BSpeed_type RoboClaw1BSpeed;

   typedef int8_t _RoboClaw1B_P_type;
  _RoboClaw1B_P_type RoboClaw1B_P;

   typedef int8_t _RoboClaw1B_I_type;
  _RoboClaw1B_I_type RoboClaw1B_I;

   typedef int8_t _RoboClaw1B_D_type;
  _RoboClaw1B_D_type RoboClaw1B_D;

   typedef int8_t _RoboClaw1B_QPPS_type;
  _RoboClaw1B_QPPS_type RoboClaw1B_QPPS;

   typedef int8_t _RoboClaw2ASpeed_type;
  _RoboClaw2ASpeed_type RoboClaw2ASpeed;

   typedef int8_t _RoboClaw2A_P_type;
  _RoboClaw2A_P_type RoboClaw2A_P;

   typedef int8_t _RoboClaw2A_I_type;
  _RoboClaw2A_I_type RoboClaw2A_I;

   typedef int8_t _RoboClaw2A_D_type;
  _RoboClaw2A_D_type RoboClaw2A_D;

   typedef int8_t _RoboClaw2A_QPPS_type;
  _RoboClaw2A_QPPS_type RoboClaw2A_QPPS;

   typedef int8_t _RoboClaw2BSpeed_type;
  _RoboClaw2BSpeed_type RoboClaw2BSpeed;

   typedef int8_t _RoboClaw2B_P_type;
  _RoboClaw2B_P_type RoboClaw2B_P;

   typedef int8_t _RoboClaw2B_I_type;
  _RoboClaw2B_I_type RoboClaw2B_I;

   typedef int8_t _RoboClaw2B_D_type;
  _RoboClaw2B_D_type RoboClaw2B_D;

   typedef int8_t _RoboClaw2B_QPPS_type;
  _RoboClaw2B_QPPS_type RoboClaw2B_QPPS;

   typedef int8_t _RoboClaw3A_PWM_type;
  _RoboClaw3A_PWM_type RoboClaw3A_PWM;

   typedef int8_t _RoboClaw3B_PWM_type;
  _RoboClaw3B_PWM_type RoboClaw3B_PWM;

   typedef int8_t _RoboClaw4A_PWM_type;
  _RoboClaw4A_PWM_type RoboClaw4A_PWM;

   typedef int8_t _RoboClaw4B_PWM_type;
  _RoboClaw4B_PWM_type RoboClaw4B_PWM;





  typedef boost::shared_ptr< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> const> ConstPtr;

}; // struct Arduino_I_

typedef ::ros_essentials_cpp::Arduino_I_<std::allocator<void> > Arduino_I;

typedef boost::shared_ptr< ::ros_essentials_cpp::Arduino_I > Arduino_IPtr;
typedef boost::shared_ptr< ::ros_essentials_cpp::Arduino_I const> Arduino_IConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_essentials_cpp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'ros_essentials_cpp': ['/home/xy/catkin_ws/src/ros_essentials_cpp/msg', '/home/xy/catkin_ws/devel/share/ros_essentials_cpp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33f7f2e037f503abe994ec968877914e";
  }

  static const char* value(const ::ros_essentials_cpp::Arduino_I_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33f7f2e037f503abULL;
  static const uint64_t static_value2 = 0xe994ec968877914eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_essentials_cpp/Arduino_I";
  }

  static const char* value(const ::ros_essentials_cpp::Arduino_I_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool relay1\n"
"bool relay2\n"
"bool relay3\n"
"bool relay4\n"
"bool relay5\n"
"bool relay6\n"
"bool relay7\n"
"bool relay8\n"
"bool RCServo1\n"
"bool RCServo2\n"
"bool RCServo3\n"
"bool RCServo4\n"
"int8 RoboClaw1ASpeed\n"
"int8 RoboClaw1A_P\n"
"int8 RoboClaw1A_I\n"
"int8 RoboClaw1A_D\n"
"int8 RoboClaw1A_QPPS\n"
"int8 RoboClaw1BSpeed\n"
"int8 RoboClaw1B_P\n"
"int8 RoboClaw1B_I\n"
"int8 RoboClaw1B_D\n"
"int8 RoboClaw1B_QPPS\n"
"int8 RoboClaw2ASpeed\n"
"int8 RoboClaw2A_P\n"
"int8 RoboClaw2A_I\n"
"int8 RoboClaw2A_D\n"
"int8 RoboClaw2A_QPPS\n"
"int8 RoboClaw2BSpeed\n"
"int8 RoboClaw2B_P\n"
"int8 RoboClaw2B_I\n"
"int8 RoboClaw2B_D\n"
"int8 RoboClaw2B_QPPS\n"
"int8 RoboClaw3A_PWM\n"
"int8 RoboClaw3B_PWM\n"
"int8 RoboClaw4A_PWM\n"
"int8 RoboClaw4B_PWM\n"
;
  }

  static const char* value(const ::ros_essentials_cpp::Arduino_I_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.relay1);
      stream.next(m.relay2);
      stream.next(m.relay3);
      stream.next(m.relay4);
      stream.next(m.relay5);
      stream.next(m.relay6);
      stream.next(m.relay7);
      stream.next(m.relay8);
      stream.next(m.RCServo1);
      stream.next(m.RCServo2);
      stream.next(m.RCServo3);
      stream.next(m.RCServo4);
      stream.next(m.RoboClaw1ASpeed);
      stream.next(m.RoboClaw1A_P);
      stream.next(m.RoboClaw1A_I);
      stream.next(m.RoboClaw1A_D);
      stream.next(m.RoboClaw1A_QPPS);
      stream.next(m.RoboClaw1BSpeed);
      stream.next(m.RoboClaw1B_P);
      stream.next(m.RoboClaw1B_I);
      stream.next(m.RoboClaw1B_D);
      stream.next(m.RoboClaw1B_QPPS);
      stream.next(m.RoboClaw2ASpeed);
      stream.next(m.RoboClaw2A_P);
      stream.next(m.RoboClaw2A_I);
      stream.next(m.RoboClaw2A_D);
      stream.next(m.RoboClaw2A_QPPS);
      stream.next(m.RoboClaw2BSpeed);
      stream.next(m.RoboClaw2B_P);
      stream.next(m.RoboClaw2B_I);
      stream.next(m.RoboClaw2B_D);
      stream.next(m.RoboClaw2B_QPPS);
      stream.next(m.RoboClaw3A_PWM);
      stream.next(m.RoboClaw3B_PWM);
      stream.next(m.RoboClaw4A_PWM);
      stream.next(m.RoboClaw4B_PWM);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Arduino_I_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_essentials_cpp::Arduino_I_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_essentials_cpp::Arduino_I_<ContainerAllocator>& v)
  {
    s << indent << "relay1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay1);
    s << indent << "relay2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay2);
    s << indent << "relay3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay3);
    s << indent << "relay4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay4);
    s << indent << "relay5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay5);
    s << indent << "relay6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay6);
    s << indent << "relay7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay7);
    s << indent << "relay8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay8);
    s << indent << "RCServo1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCServo1);
    s << indent << "RCServo2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCServo2);
    s << indent << "RCServo3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCServo3);
    s << indent << "RCServo4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCServo4);
    s << indent << "RoboClaw1ASpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1ASpeed);
    s << indent << "RoboClaw1A_P: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1A_P);
    s << indent << "RoboClaw1A_I: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1A_I);
    s << indent << "RoboClaw1A_D: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1A_D);
    s << indent << "RoboClaw1A_QPPS: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1A_QPPS);
    s << indent << "RoboClaw1BSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1BSpeed);
    s << indent << "RoboClaw1B_P: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1B_P);
    s << indent << "RoboClaw1B_I: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1B_I);
    s << indent << "RoboClaw1B_D: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1B_D);
    s << indent << "RoboClaw1B_QPPS: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw1B_QPPS);
    s << indent << "RoboClaw2ASpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2ASpeed);
    s << indent << "RoboClaw2A_P: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2A_P);
    s << indent << "RoboClaw2A_I: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2A_I);
    s << indent << "RoboClaw2A_D: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2A_D);
    s << indent << "RoboClaw2A_QPPS: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2A_QPPS);
    s << indent << "RoboClaw2BSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2BSpeed);
    s << indent << "RoboClaw2B_P: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2B_P);
    s << indent << "RoboClaw2B_I: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2B_I);
    s << indent << "RoboClaw2B_D: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2B_D);
    s << indent << "RoboClaw2B_QPPS: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw2B_QPPS);
    s << indent << "RoboClaw3A_PWM: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw3A_PWM);
    s << indent << "RoboClaw3B_PWM: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw3B_PWM);
    s << indent << "RoboClaw4A_PWM: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw4A_PWM);
    s << indent << "RoboClaw4B_PWM: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RoboClaw4B_PWM);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ESSENTIALS_CPP_MESSAGE_ARDUINO_I_H
