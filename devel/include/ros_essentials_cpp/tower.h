// Generated by gencpp from file ros_essentials_cpp/tower.msg
// DO NOT EDIT!


#ifndef ROS_ESSENTIALS_CPP_MESSAGE_TOWER_H
#define ROS_ESSENTIALS_CPP_MESSAGE_TOWER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_essentials_cpp
{
template <class ContainerAllocator>
struct tower_
{
  typedef tower_<ContainerAllocator> Type;

  tower_()
    : cartTtower_limit(false)
    , towerTcart_limit(false)
    , towerTsilo_limit(false)
    , siloTtower_limit(false)
    , cartTtower_distance(0)
    , towerTcart_distance(0)
    , towerTsilo_distance(0)
    , siloTtower_distance(0)  {
    }
  tower_(const ContainerAllocator& _alloc)
    : cartTtower_limit(false)
    , towerTcart_limit(false)
    , towerTsilo_limit(false)
    , siloTtower_limit(false)
    , cartTtower_distance(0)
    , towerTcart_distance(0)
    , towerTsilo_distance(0)
    , siloTtower_distance(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cartTtower_limit_type;
  _cartTtower_limit_type cartTtower_limit;

   typedef uint8_t _towerTcart_limit_type;
  _towerTcart_limit_type towerTcart_limit;

   typedef uint8_t _towerTsilo_limit_type;
  _towerTsilo_limit_type towerTsilo_limit;

   typedef uint8_t _siloTtower_limit_type;
  _siloTtower_limit_type siloTtower_limit;

   typedef int8_t _cartTtower_distance_type;
  _cartTtower_distance_type cartTtower_distance;

   typedef int8_t _towerTcart_distance_type;
  _towerTcart_distance_type towerTcart_distance;

   typedef int8_t _towerTsilo_distance_type;
  _towerTsilo_distance_type towerTsilo_distance;

   typedef int8_t _siloTtower_distance_type;
  _siloTtower_distance_type siloTtower_distance;





  typedef boost::shared_ptr< ::ros_essentials_cpp::tower_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_essentials_cpp::tower_<ContainerAllocator> const> ConstPtr;

}; // struct tower_

typedef ::ros_essentials_cpp::tower_<std::allocator<void> > tower;

typedef boost::shared_ptr< ::ros_essentials_cpp::tower > towerPtr;
typedef boost::shared_ptr< ::ros_essentials_cpp::tower const> towerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_essentials_cpp::tower_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_essentials_cpp::tower_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_essentials_cpp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'ros_essentials_cpp': ['/home/xy/catkin_ws/src/ros_essentials_cpp/msg', '/home/xy/catkin_ws/devel/share/ros_essentials_cpp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_essentials_cpp::tower_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_essentials_cpp::tower_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_essentials_cpp::tower_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_essentials_cpp::tower_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_essentials_cpp::tower_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_essentials_cpp::tower_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_essentials_cpp::tower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2d3100de5c5a3b232c361555083996e";
  }

  static const char* value(const ::ros_essentials_cpp::tower_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2d3100de5c5a3b2ULL;
  static const uint64_t static_value2 = 0x32c361555083996eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_essentials_cpp::tower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_essentials_cpp/tower";
  }

  static const char* value(const ::ros_essentials_cpp::tower_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_essentials_cpp::tower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool cartTtower_limit\n"
"bool towerTcart_limit\n"
"bool towerTsilo_limit\n"
"bool siloTtower_limit\n"
"int8 cartTtower_distance\n"
"int8 towerTcart_distance\n"
"int8 towerTsilo_distance\n"
"int8 siloTtower_distance\n"
;
  }

  static const char* value(const ::ros_essentials_cpp::tower_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_essentials_cpp::tower_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cartTtower_limit);
      stream.next(m.towerTcart_limit);
      stream.next(m.towerTsilo_limit);
      stream.next(m.siloTtower_limit);
      stream.next(m.cartTtower_distance);
      stream.next(m.towerTcart_distance);
      stream.next(m.towerTsilo_distance);
      stream.next(m.siloTtower_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tower_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_essentials_cpp::tower_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_essentials_cpp::tower_<ContainerAllocator>& v)
  {
    s << indent << "cartTtower_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cartTtower_limit);
    s << indent << "towerTcart_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.towerTcart_limit);
    s << indent << "towerTsilo_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.towerTsilo_limit);
    s << indent << "siloTtower_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.siloTtower_limit);
    s << indent << "cartTtower_distance: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cartTtower_distance);
    s << indent << "towerTcart_distance: ";
    Printer<int8_t>::stream(s, indent + "  ", v.towerTcart_distance);
    s << indent << "towerTsilo_distance: ";
    Printer<int8_t>::stream(s, indent + "  ", v.towerTsilo_distance);
    s << indent << "siloTtower_distance: ";
    Printer<int8_t>::stream(s, indent + "  ", v.siloTtower_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ESSENTIALS_CPP_MESSAGE_TOWER_H
