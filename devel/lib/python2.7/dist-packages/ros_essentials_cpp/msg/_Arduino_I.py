# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_essentials_cpp/Arduino_I.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Arduino_I(genpy.Message):
  _md5sum = "33f7f2e037f503abe994ec968877914e"
  _type = "ros_essentials_cpp/Arduino_I"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool relay1
bool relay2
bool relay3
bool relay4
bool relay5
bool relay6
bool relay7
bool relay8
bool RCServo1
bool RCServo2
bool RCServo3
bool RCServo4
int8 RoboClaw1ASpeed
int8 RoboClaw1A_P
int8 RoboClaw1A_I
int8 RoboClaw1A_D
int8 RoboClaw1A_QPPS
int8 RoboClaw1BSpeed
int8 RoboClaw1B_P
int8 RoboClaw1B_I
int8 RoboClaw1B_D
int8 RoboClaw1B_QPPS
int8 RoboClaw2ASpeed
int8 RoboClaw2A_P
int8 RoboClaw2A_I
int8 RoboClaw2A_D
int8 RoboClaw2A_QPPS
int8 RoboClaw2BSpeed
int8 RoboClaw2B_P
int8 RoboClaw2B_I
int8 RoboClaw2B_D
int8 RoboClaw2B_QPPS
int8 RoboClaw3A_PWM
int8 RoboClaw3B_PWM
int8 RoboClaw4A_PWM
int8 RoboClaw4B_PWM
"""
  __slots__ = ['relay1','relay2','relay3','relay4','relay5','relay6','relay7','relay8','RCServo1','RCServo2','RCServo3','RCServo4','RoboClaw1ASpeed','RoboClaw1A_P','RoboClaw1A_I','RoboClaw1A_D','RoboClaw1A_QPPS','RoboClaw1BSpeed','RoboClaw1B_P','RoboClaw1B_I','RoboClaw1B_D','RoboClaw1B_QPPS','RoboClaw2ASpeed','RoboClaw2A_P','RoboClaw2A_I','RoboClaw2A_D','RoboClaw2A_QPPS','RoboClaw2BSpeed','RoboClaw2B_P','RoboClaw2B_I','RoboClaw2B_D','RoboClaw2B_QPPS','RoboClaw3A_PWM','RoboClaw3B_PWM','RoboClaw4A_PWM','RoboClaw4B_PWM']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       relay1,relay2,relay3,relay4,relay5,relay6,relay7,relay8,RCServo1,RCServo2,RCServo3,RCServo4,RoboClaw1ASpeed,RoboClaw1A_P,RoboClaw1A_I,RoboClaw1A_D,RoboClaw1A_QPPS,RoboClaw1BSpeed,RoboClaw1B_P,RoboClaw1B_I,RoboClaw1B_D,RoboClaw1B_QPPS,RoboClaw2ASpeed,RoboClaw2A_P,RoboClaw2A_I,RoboClaw2A_D,RoboClaw2A_QPPS,RoboClaw2BSpeed,RoboClaw2B_P,RoboClaw2B_I,RoboClaw2B_D,RoboClaw2B_QPPS,RoboClaw3A_PWM,RoboClaw3B_PWM,RoboClaw4A_PWM,RoboClaw4B_PWM

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Arduino_I, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.relay1 is None:
        self.relay1 = False
      if self.relay2 is None:
        self.relay2 = False
      if self.relay3 is None:
        self.relay3 = False
      if self.relay4 is None:
        self.relay4 = False
      if self.relay5 is None:
        self.relay5 = False
      if self.relay6 is None:
        self.relay6 = False
      if self.relay7 is None:
        self.relay7 = False
      if self.relay8 is None:
        self.relay8 = False
      if self.RCServo1 is None:
        self.RCServo1 = False
      if self.RCServo2 is None:
        self.RCServo2 = False
      if self.RCServo3 is None:
        self.RCServo3 = False
      if self.RCServo4 is None:
        self.RCServo4 = False
      if self.RoboClaw1ASpeed is None:
        self.RoboClaw1ASpeed = 0
      if self.RoboClaw1A_P is None:
        self.RoboClaw1A_P = 0
      if self.RoboClaw1A_I is None:
        self.RoboClaw1A_I = 0
      if self.RoboClaw1A_D is None:
        self.RoboClaw1A_D = 0
      if self.RoboClaw1A_QPPS is None:
        self.RoboClaw1A_QPPS = 0
      if self.RoboClaw1BSpeed is None:
        self.RoboClaw1BSpeed = 0
      if self.RoboClaw1B_P is None:
        self.RoboClaw1B_P = 0
      if self.RoboClaw1B_I is None:
        self.RoboClaw1B_I = 0
      if self.RoboClaw1B_D is None:
        self.RoboClaw1B_D = 0
      if self.RoboClaw1B_QPPS is None:
        self.RoboClaw1B_QPPS = 0
      if self.RoboClaw2ASpeed is None:
        self.RoboClaw2ASpeed = 0
      if self.RoboClaw2A_P is None:
        self.RoboClaw2A_P = 0
      if self.RoboClaw2A_I is None:
        self.RoboClaw2A_I = 0
      if self.RoboClaw2A_D is None:
        self.RoboClaw2A_D = 0
      if self.RoboClaw2A_QPPS is None:
        self.RoboClaw2A_QPPS = 0
      if self.RoboClaw2BSpeed is None:
        self.RoboClaw2BSpeed = 0
      if self.RoboClaw2B_P is None:
        self.RoboClaw2B_P = 0
      if self.RoboClaw2B_I is None:
        self.RoboClaw2B_I = 0
      if self.RoboClaw2B_D is None:
        self.RoboClaw2B_D = 0
      if self.RoboClaw2B_QPPS is None:
        self.RoboClaw2B_QPPS = 0
      if self.RoboClaw3A_PWM is None:
        self.RoboClaw3A_PWM = 0
      if self.RoboClaw3B_PWM is None:
        self.RoboClaw3B_PWM = 0
      if self.RoboClaw4A_PWM is None:
        self.RoboClaw4A_PWM = 0
      if self.RoboClaw4B_PWM is None:
        self.RoboClaw4B_PWM = 0
    else:
      self.relay1 = False
      self.relay2 = False
      self.relay3 = False
      self.relay4 = False
      self.relay5 = False
      self.relay6 = False
      self.relay7 = False
      self.relay8 = False
      self.RCServo1 = False
      self.RCServo2 = False
      self.RCServo3 = False
      self.RCServo4 = False
      self.RoboClaw1ASpeed = 0
      self.RoboClaw1A_P = 0
      self.RoboClaw1A_I = 0
      self.RoboClaw1A_D = 0
      self.RoboClaw1A_QPPS = 0
      self.RoboClaw1BSpeed = 0
      self.RoboClaw1B_P = 0
      self.RoboClaw1B_I = 0
      self.RoboClaw1B_D = 0
      self.RoboClaw1B_QPPS = 0
      self.RoboClaw2ASpeed = 0
      self.RoboClaw2A_P = 0
      self.RoboClaw2A_I = 0
      self.RoboClaw2A_D = 0
      self.RoboClaw2A_QPPS = 0
      self.RoboClaw2BSpeed = 0
      self.RoboClaw2B_P = 0
      self.RoboClaw2B_I = 0
      self.RoboClaw2B_D = 0
      self.RoboClaw2B_QPPS = 0
      self.RoboClaw3A_PWM = 0
      self.RoboClaw3B_PWM = 0
      self.RoboClaw4A_PWM = 0
      self.RoboClaw4B_PWM = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12B24b().pack(_x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.RCServo1, _x.RCServo2, _x.RCServo3, _x.RCServo4, _x.RoboClaw1ASpeed, _x.RoboClaw1A_P, _x.RoboClaw1A_I, _x.RoboClaw1A_D, _x.RoboClaw1A_QPPS, _x.RoboClaw1BSpeed, _x.RoboClaw1B_P, _x.RoboClaw1B_I, _x.RoboClaw1B_D, _x.RoboClaw1B_QPPS, _x.RoboClaw2ASpeed, _x.RoboClaw2A_P, _x.RoboClaw2A_I, _x.RoboClaw2A_D, _x.RoboClaw2A_QPPS, _x.RoboClaw2BSpeed, _x.RoboClaw2B_P, _x.RoboClaw2B_I, _x.RoboClaw2B_D, _x.RoboClaw2B_QPPS, _x.RoboClaw3A_PWM, _x.RoboClaw3B_PWM, _x.RoboClaw4A_PWM, _x.RoboClaw4B_PWM))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.RCServo1, _x.RCServo2, _x.RCServo3, _x.RCServo4, _x.RoboClaw1ASpeed, _x.RoboClaw1A_P, _x.RoboClaw1A_I, _x.RoboClaw1A_D, _x.RoboClaw1A_QPPS, _x.RoboClaw1BSpeed, _x.RoboClaw1B_P, _x.RoboClaw1B_I, _x.RoboClaw1B_D, _x.RoboClaw1B_QPPS, _x.RoboClaw2ASpeed, _x.RoboClaw2A_P, _x.RoboClaw2A_I, _x.RoboClaw2A_D, _x.RoboClaw2A_QPPS, _x.RoboClaw2BSpeed, _x.RoboClaw2B_P, _x.RoboClaw2B_I, _x.RoboClaw2B_D, _x.RoboClaw2B_QPPS, _x.RoboClaw3A_PWM, _x.RoboClaw3B_PWM, _x.RoboClaw4A_PWM, _x.RoboClaw4B_PWM,) = _get_struct_12B24b().unpack(str[start:end])
      self.relay1 = bool(self.relay1)
      self.relay2 = bool(self.relay2)
      self.relay3 = bool(self.relay3)
      self.relay4 = bool(self.relay4)
      self.relay5 = bool(self.relay5)
      self.relay6 = bool(self.relay6)
      self.relay7 = bool(self.relay7)
      self.relay8 = bool(self.relay8)
      self.RCServo1 = bool(self.RCServo1)
      self.RCServo2 = bool(self.RCServo2)
      self.RCServo3 = bool(self.RCServo3)
      self.RCServo4 = bool(self.RCServo4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12B24b().pack(_x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.RCServo1, _x.RCServo2, _x.RCServo3, _x.RCServo4, _x.RoboClaw1ASpeed, _x.RoboClaw1A_P, _x.RoboClaw1A_I, _x.RoboClaw1A_D, _x.RoboClaw1A_QPPS, _x.RoboClaw1BSpeed, _x.RoboClaw1B_P, _x.RoboClaw1B_I, _x.RoboClaw1B_D, _x.RoboClaw1B_QPPS, _x.RoboClaw2ASpeed, _x.RoboClaw2A_P, _x.RoboClaw2A_I, _x.RoboClaw2A_D, _x.RoboClaw2A_QPPS, _x.RoboClaw2BSpeed, _x.RoboClaw2B_P, _x.RoboClaw2B_I, _x.RoboClaw2B_D, _x.RoboClaw2B_QPPS, _x.RoboClaw3A_PWM, _x.RoboClaw3B_PWM, _x.RoboClaw4A_PWM, _x.RoboClaw4B_PWM))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.RCServo1, _x.RCServo2, _x.RCServo3, _x.RCServo4, _x.RoboClaw1ASpeed, _x.RoboClaw1A_P, _x.RoboClaw1A_I, _x.RoboClaw1A_D, _x.RoboClaw1A_QPPS, _x.RoboClaw1BSpeed, _x.RoboClaw1B_P, _x.RoboClaw1B_I, _x.RoboClaw1B_D, _x.RoboClaw1B_QPPS, _x.RoboClaw2ASpeed, _x.RoboClaw2A_P, _x.RoboClaw2A_I, _x.RoboClaw2A_D, _x.RoboClaw2A_QPPS, _x.RoboClaw2BSpeed, _x.RoboClaw2B_P, _x.RoboClaw2B_I, _x.RoboClaw2B_D, _x.RoboClaw2B_QPPS, _x.RoboClaw3A_PWM, _x.RoboClaw3B_PWM, _x.RoboClaw4A_PWM, _x.RoboClaw4B_PWM,) = _get_struct_12B24b().unpack(str[start:end])
      self.relay1 = bool(self.relay1)
      self.relay2 = bool(self.relay2)
      self.relay3 = bool(self.relay3)
      self.relay4 = bool(self.relay4)
      self.relay5 = bool(self.relay5)
      self.relay6 = bool(self.relay6)
      self.relay7 = bool(self.relay7)
      self.relay8 = bool(self.relay8)
      self.RCServo1 = bool(self.RCServo1)
      self.RCServo2 = bool(self.RCServo2)
      self.RCServo3 = bool(self.RCServo3)
      self.RCServo4 = bool(self.RCServo4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12B24b = None
def _get_struct_12B24b():
    global _struct_12B24b
    if _struct_12B24b is None:
        _struct_12B24b = struct.Struct("<12B24b")
    return _struct_12B24b
