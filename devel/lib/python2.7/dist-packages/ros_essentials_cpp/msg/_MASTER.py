# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_essentials_cpp/MASTER.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MASTER(genpy.Message):
  _md5sum = "6ac9cdd2ea8832f8ca133fdf7b19daac"
  _type = "ros_essentials_cpp/MASTER"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool deliverySwitch
bool hopperSwitch
bool doserSwitch
int8 doserSpeed
bool wettingSwitch
bool mixerSwitch
int8 mixerSpeed
bool pumpSwitch
int8 pumpRotarySpeed
int8 pumpUpDownSpeed

bool eStop
bool tower2Cart
bool cart2Tower
int8 RoboClaw5PWM
int8 RoboClaw6PWM
"""
  __slots__ = ['deliverySwitch','hopperSwitch','doserSwitch','doserSpeed','wettingSwitch','mixerSwitch','mixerSpeed','pumpSwitch','pumpRotarySpeed','pumpUpDownSpeed','eStop','tower2Cart','cart2Tower','RoboClaw5PWM','RoboClaw6PWM']
  _slot_types = ['bool','bool','bool','int8','bool','bool','int8','bool','int8','int8','bool','bool','bool','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       deliverySwitch,hopperSwitch,doserSwitch,doserSpeed,wettingSwitch,mixerSwitch,mixerSpeed,pumpSwitch,pumpRotarySpeed,pumpUpDownSpeed,eStop,tower2Cart,cart2Tower,RoboClaw5PWM,RoboClaw6PWM

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MASTER, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.deliverySwitch is None:
        self.deliverySwitch = False
      if self.hopperSwitch is None:
        self.hopperSwitch = False
      if self.doserSwitch is None:
        self.doserSwitch = False
      if self.doserSpeed is None:
        self.doserSpeed = 0
      if self.wettingSwitch is None:
        self.wettingSwitch = False
      if self.mixerSwitch is None:
        self.mixerSwitch = False
      if self.mixerSpeed is None:
        self.mixerSpeed = 0
      if self.pumpSwitch is None:
        self.pumpSwitch = False
      if self.pumpRotarySpeed is None:
        self.pumpRotarySpeed = 0
      if self.pumpUpDownSpeed is None:
        self.pumpUpDownSpeed = 0
      if self.eStop is None:
        self.eStop = False
      if self.tower2Cart is None:
        self.tower2Cart = False
      if self.cart2Tower is None:
        self.cart2Tower = False
      if self.RoboClaw5PWM is None:
        self.RoboClaw5PWM = 0
      if self.RoboClaw6PWM is None:
        self.RoboClaw6PWM = 0
    else:
      self.deliverySwitch = False
      self.hopperSwitch = False
      self.doserSwitch = False
      self.doserSpeed = 0
      self.wettingSwitch = False
      self.mixerSwitch = False
      self.mixerSpeed = 0
      self.pumpSwitch = False
      self.pumpRotarySpeed = 0
      self.pumpUpDownSpeed = 0
      self.eStop = False
      self.tower2Cart = False
      self.cart2Tower = False
      self.RoboClaw5PWM = 0
      self.RoboClaw6PWM = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Bb2BbB2b3B2b().pack(_x.deliverySwitch, _x.hopperSwitch, _x.doserSwitch, _x.doserSpeed, _x.wettingSwitch, _x.mixerSwitch, _x.mixerSpeed, _x.pumpSwitch, _x.pumpRotarySpeed, _x.pumpUpDownSpeed, _x.eStop, _x.tower2Cart, _x.cart2Tower, _x.RoboClaw5PWM, _x.RoboClaw6PWM))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.deliverySwitch, _x.hopperSwitch, _x.doserSwitch, _x.doserSpeed, _x.wettingSwitch, _x.mixerSwitch, _x.mixerSpeed, _x.pumpSwitch, _x.pumpRotarySpeed, _x.pumpUpDownSpeed, _x.eStop, _x.tower2Cart, _x.cart2Tower, _x.RoboClaw5PWM, _x.RoboClaw6PWM,) = _get_struct_3Bb2BbB2b3B2b().unpack(str[start:end])
      self.deliverySwitch = bool(self.deliverySwitch)
      self.hopperSwitch = bool(self.hopperSwitch)
      self.doserSwitch = bool(self.doserSwitch)
      self.wettingSwitch = bool(self.wettingSwitch)
      self.mixerSwitch = bool(self.mixerSwitch)
      self.pumpSwitch = bool(self.pumpSwitch)
      self.eStop = bool(self.eStop)
      self.tower2Cart = bool(self.tower2Cart)
      self.cart2Tower = bool(self.cart2Tower)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Bb2BbB2b3B2b().pack(_x.deliverySwitch, _x.hopperSwitch, _x.doserSwitch, _x.doserSpeed, _x.wettingSwitch, _x.mixerSwitch, _x.mixerSpeed, _x.pumpSwitch, _x.pumpRotarySpeed, _x.pumpUpDownSpeed, _x.eStop, _x.tower2Cart, _x.cart2Tower, _x.RoboClaw5PWM, _x.RoboClaw6PWM))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.deliverySwitch, _x.hopperSwitch, _x.doserSwitch, _x.doserSpeed, _x.wettingSwitch, _x.mixerSwitch, _x.mixerSpeed, _x.pumpSwitch, _x.pumpRotarySpeed, _x.pumpUpDownSpeed, _x.eStop, _x.tower2Cart, _x.cart2Tower, _x.RoboClaw5PWM, _x.RoboClaw6PWM,) = _get_struct_3Bb2BbB2b3B2b().unpack(str[start:end])
      self.deliverySwitch = bool(self.deliverySwitch)
      self.hopperSwitch = bool(self.hopperSwitch)
      self.doserSwitch = bool(self.doserSwitch)
      self.wettingSwitch = bool(self.wettingSwitch)
      self.mixerSwitch = bool(self.mixerSwitch)
      self.pumpSwitch = bool(self.pumpSwitch)
      self.eStop = bool(self.eStop)
      self.tower2Cart = bool(self.tower2Cart)
      self.cart2Tower = bool(self.cart2Tower)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bb2BbB2b3B2b = None
def _get_struct_3Bb2BbB2b3B2b():
    global _struct_3Bb2BbB2b3B2b
    if _struct_3Bb2BbB2b3B2b is None:
        _struct_3Bb2BbB2b3B2b = struct.Struct("<3Bb2BbB2b3B2b")
    return _struct_3Bb2BbB2b3B2b
