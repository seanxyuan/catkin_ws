# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_essentials_cpp/DELIVERY.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DELIVERY(genpy.Message):
  _md5sum = "7a84d7280a0d3509a502794110897fa1"
  _type = "ros_essentials_cpp/DELIVERY"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool siloInputDoor
int8 siloConcreteLevel1
int8 siloConcreteLevel2
bool siloBreaker
bool siloDoser
bool siloHopperLevel
bool siloTrasmit
int8 towerLifting
bool towerLiftError
bool towerFunnelBreaker
bool towerFunnelBreakerError
bool towerAugerMotor1
int8 towerAugerMotor1Speed
int8 towerAugerMotor1Current
int8 towerAugerMotor1Torque
bool towerAugerMotor2
int8 towerAugerMotor2Speed
int8 towerAugerMotor2Current
int8 towerAugerMotor2Torque
"""
  __slots__ = ['siloInputDoor','siloConcreteLevel1','siloConcreteLevel2','siloBreaker','siloDoser','siloHopperLevel','siloTrasmit','towerLifting','towerLiftError','towerFunnelBreaker','towerFunnelBreakerError','towerAugerMotor1','towerAugerMotor1Speed','towerAugerMotor1Current','towerAugerMotor1Torque','towerAugerMotor2','towerAugerMotor2Speed','towerAugerMotor2Current','towerAugerMotor2Torque']
  _slot_types = ['bool','int8','int8','bool','bool','bool','bool','int8','bool','bool','bool','bool','int8','int8','int8','bool','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       siloInputDoor,siloConcreteLevel1,siloConcreteLevel2,siloBreaker,siloDoser,siloHopperLevel,siloTrasmit,towerLifting,towerLiftError,towerFunnelBreaker,towerFunnelBreakerError,towerAugerMotor1,towerAugerMotor1Speed,towerAugerMotor1Current,towerAugerMotor1Torque,towerAugerMotor2,towerAugerMotor2Speed,towerAugerMotor2Current,towerAugerMotor2Torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DELIVERY, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.siloInputDoor is None:
        self.siloInputDoor = False
      if self.siloConcreteLevel1 is None:
        self.siloConcreteLevel1 = 0
      if self.siloConcreteLevel2 is None:
        self.siloConcreteLevel2 = 0
      if self.siloBreaker is None:
        self.siloBreaker = False
      if self.siloDoser is None:
        self.siloDoser = False
      if self.siloHopperLevel is None:
        self.siloHopperLevel = False
      if self.siloTrasmit is None:
        self.siloTrasmit = False
      if self.towerLifting is None:
        self.towerLifting = 0
      if self.towerLiftError is None:
        self.towerLiftError = False
      if self.towerFunnelBreaker is None:
        self.towerFunnelBreaker = False
      if self.towerFunnelBreakerError is None:
        self.towerFunnelBreakerError = False
      if self.towerAugerMotor1 is None:
        self.towerAugerMotor1 = False
      if self.towerAugerMotor1Speed is None:
        self.towerAugerMotor1Speed = 0
      if self.towerAugerMotor1Current is None:
        self.towerAugerMotor1Current = 0
      if self.towerAugerMotor1Torque is None:
        self.towerAugerMotor1Torque = 0
      if self.towerAugerMotor2 is None:
        self.towerAugerMotor2 = False
      if self.towerAugerMotor2Speed is None:
        self.towerAugerMotor2Speed = 0
      if self.towerAugerMotor2Current is None:
        self.towerAugerMotor2Current = 0
      if self.towerAugerMotor2Torque is None:
        self.towerAugerMotor2Torque = 0
    else:
      self.siloInputDoor = False
      self.siloConcreteLevel1 = 0
      self.siloConcreteLevel2 = 0
      self.siloBreaker = False
      self.siloDoser = False
      self.siloHopperLevel = False
      self.siloTrasmit = False
      self.towerLifting = 0
      self.towerLiftError = False
      self.towerFunnelBreaker = False
      self.towerFunnelBreakerError = False
      self.towerAugerMotor1 = False
      self.towerAugerMotor1Speed = 0
      self.towerAugerMotor1Current = 0
      self.towerAugerMotor1Torque = 0
      self.towerAugerMotor2 = False
      self.towerAugerMotor2Speed = 0
      self.towerAugerMotor2Current = 0
      self.towerAugerMotor2Torque = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2b4Bb4B3bB3b().pack(_x.siloInputDoor, _x.siloConcreteLevel1, _x.siloConcreteLevel2, _x.siloBreaker, _x.siloDoser, _x.siloHopperLevel, _x.siloTrasmit, _x.towerLifting, _x.towerLiftError, _x.towerFunnelBreaker, _x.towerFunnelBreakerError, _x.towerAugerMotor1, _x.towerAugerMotor1Speed, _x.towerAugerMotor1Current, _x.towerAugerMotor1Torque, _x.towerAugerMotor2, _x.towerAugerMotor2Speed, _x.towerAugerMotor2Current, _x.towerAugerMotor2Torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.siloInputDoor, _x.siloConcreteLevel1, _x.siloConcreteLevel2, _x.siloBreaker, _x.siloDoser, _x.siloHopperLevel, _x.siloTrasmit, _x.towerLifting, _x.towerLiftError, _x.towerFunnelBreaker, _x.towerFunnelBreakerError, _x.towerAugerMotor1, _x.towerAugerMotor1Speed, _x.towerAugerMotor1Current, _x.towerAugerMotor1Torque, _x.towerAugerMotor2, _x.towerAugerMotor2Speed, _x.towerAugerMotor2Current, _x.towerAugerMotor2Torque,) = _get_struct_B2b4Bb4B3bB3b().unpack(str[start:end])
      self.siloInputDoor = bool(self.siloInputDoor)
      self.siloBreaker = bool(self.siloBreaker)
      self.siloDoser = bool(self.siloDoser)
      self.siloHopperLevel = bool(self.siloHopperLevel)
      self.siloTrasmit = bool(self.siloTrasmit)
      self.towerLiftError = bool(self.towerLiftError)
      self.towerFunnelBreaker = bool(self.towerFunnelBreaker)
      self.towerFunnelBreakerError = bool(self.towerFunnelBreakerError)
      self.towerAugerMotor1 = bool(self.towerAugerMotor1)
      self.towerAugerMotor2 = bool(self.towerAugerMotor2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2b4Bb4B3bB3b().pack(_x.siloInputDoor, _x.siloConcreteLevel1, _x.siloConcreteLevel2, _x.siloBreaker, _x.siloDoser, _x.siloHopperLevel, _x.siloTrasmit, _x.towerLifting, _x.towerLiftError, _x.towerFunnelBreaker, _x.towerFunnelBreakerError, _x.towerAugerMotor1, _x.towerAugerMotor1Speed, _x.towerAugerMotor1Current, _x.towerAugerMotor1Torque, _x.towerAugerMotor2, _x.towerAugerMotor2Speed, _x.towerAugerMotor2Current, _x.towerAugerMotor2Torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.siloInputDoor, _x.siloConcreteLevel1, _x.siloConcreteLevel2, _x.siloBreaker, _x.siloDoser, _x.siloHopperLevel, _x.siloTrasmit, _x.towerLifting, _x.towerLiftError, _x.towerFunnelBreaker, _x.towerFunnelBreakerError, _x.towerAugerMotor1, _x.towerAugerMotor1Speed, _x.towerAugerMotor1Current, _x.towerAugerMotor1Torque, _x.towerAugerMotor2, _x.towerAugerMotor2Speed, _x.towerAugerMotor2Current, _x.towerAugerMotor2Torque,) = _get_struct_B2b4Bb4B3bB3b().unpack(str[start:end])
      self.siloInputDoor = bool(self.siloInputDoor)
      self.siloBreaker = bool(self.siloBreaker)
      self.siloDoser = bool(self.siloDoser)
      self.siloHopperLevel = bool(self.siloHopperLevel)
      self.siloTrasmit = bool(self.siloTrasmit)
      self.towerLiftError = bool(self.towerLiftError)
      self.towerFunnelBreaker = bool(self.towerFunnelBreaker)
      self.towerFunnelBreakerError = bool(self.towerFunnelBreakerError)
      self.towerAugerMotor1 = bool(self.towerAugerMotor1)
      self.towerAugerMotor2 = bool(self.towerAugerMotor2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2b4Bb4B3bB3b = None
def _get_struct_B2b4Bb4B3bB3b():
    global _struct_B2b4Bb4B3bB3b
    if _struct_B2b4Bb4B3bB3b is None:
        _struct_B2b4Bb4B3bB3b = struct.Struct("<B2b4Bb4B3bB3b")
    return _struct_B2b4Bb4B3bB3b
