# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_essentials_cpp/CART_WETTING.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CART_WETTING(genpy.Message):
  _md5sum = "b94dfd08ede217b9cf320c1f63856e66"
  _type = "ros_essentials_cpp/CART_WETTING"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool fan
bool fanError
int8 wettingAgigator
bool wettingAgigatorError
bool waterRelay
int8 waterFlowRate

"""
  __slots__ = ['fan','fanError','wettingAgigator','wettingAgigatorError','waterRelay','waterFlowRate']
  _slot_types = ['bool','bool','int8','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fan,fanError,wettingAgigator,wettingAgigatorError,waterRelay,waterFlowRate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CART_WETTING, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fan is None:
        self.fan = False
      if self.fanError is None:
        self.fanError = False
      if self.wettingAgigator is None:
        self.wettingAgigator = 0
      if self.wettingAgigatorError is None:
        self.wettingAgigatorError = False
      if self.waterRelay is None:
        self.waterRelay = False
      if self.waterFlowRate is None:
        self.waterFlowRate = 0
    else:
      self.fan = False
      self.fanError = False
      self.wettingAgigator = 0
      self.wettingAgigatorError = False
      self.waterRelay = False
      self.waterFlowRate = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bb2Bb().pack(_x.fan, _x.fanError, _x.wettingAgigator, _x.wettingAgigatorError, _x.waterRelay, _x.waterFlowRate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.fan, _x.fanError, _x.wettingAgigator, _x.wettingAgigatorError, _x.waterRelay, _x.waterFlowRate,) = _get_struct_2Bb2Bb().unpack(str[start:end])
      self.fan = bool(self.fan)
      self.fanError = bool(self.fanError)
      self.wettingAgigatorError = bool(self.wettingAgigatorError)
      self.waterRelay = bool(self.waterRelay)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bb2Bb().pack(_x.fan, _x.fanError, _x.wettingAgigator, _x.wettingAgigatorError, _x.waterRelay, _x.waterFlowRate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.fan, _x.fanError, _x.wettingAgigator, _x.wettingAgigatorError, _x.waterRelay, _x.waterFlowRate,) = _get_struct_2Bb2Bb().unpack(str[start:end])
      self.fan = bool(self.fan)
      self.fanError = bool(self.fanError)
      self.wettingAgigatorError = bool(self.wettingAgigatorError)
      self.waterRelay = bool(self.waterRelay)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bb2Bb = None
def _get_struct_2Bb2Bb():
    global _struct_2Bb2Bb
    if _struct_2Bb2Bb is None:
        _struct_2Bb2Bb = struct.Struct("<2Bb2Bb")
    return _struct_2Bb2Bb
