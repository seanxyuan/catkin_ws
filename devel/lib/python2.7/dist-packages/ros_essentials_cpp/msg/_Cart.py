# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_essentials_cpp/Cart.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Cart(genpy.Message):
  _md5sum = "776fd6e482fa89410df61d8ea2f4d06a"
  _type = "ros_essentials_cpp/Cart"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 motor1Speed
float32 motor2Speed
float32 motor3Speed
float32 motor4Speed
bool motor1Error
bool motor2Error
bool motor3Error
bool motor4Error
float32 motor1PWM
float32 motor2PWM
float32 motor3PWM
float32 motor4PWM
bool motor1Overcurrent
bool motor2Overcurrent
bool motor3Overcurrent
bool motor4Overcurrent
bool sensor1
bool sensor2
bool sensor3
bool sensor4
bool sensor5
bool sensor6
bool sensor7
bool sensor8
bool relay1
bool relay2
bool relay3
bool relay4
bool relay5
bool relay6
bool relay7
bool relay8
bool relay1Error
bool relay2Error
bool relay3Error
bool relay4Error
bool relay5Error
bool relay6Error
bool relay7Error
bool relay8Error
bool servoMotor1
bool servoMotor2
bool servoMotor3
bool servoMotor4
int8 mixingCamera

"""
  __slots__ = ['motor1Speed','motor2Speed','motor3Speed','motor4Speed','motor1Error','motor2Error','motor3Error','motor4Error','motor1PWM','motor2PWM','motor3PWM','motor4PWM','motor1Overcurrent','motor2Overcurrent','motor3Overcurrent','motor4Overcurrent','sensor1','sensor2','sensor3','sensor4','sensor5','sensor6','sensor7','sensor8','relay1','relay2','relay3','relay4','relay5','relay6','relay7','relay8','relay1Error','relay2Error','relay3Error','relay4Error','relay5Error','relay6Error','relay7Error','relay8Error','servoMotor1','servoMotor2','servoMotor3','servoMotor4','mixingCamera']
  _slot_types = ['float32','float32','float32','float32','bool','bool','bool','bool','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor1Speed,motor2Speed,motor3Speed,motor4Speed,motor1Error,motor2Error,motor3Error,motor4Error,motor1PWM,motor2PWM,motor3PWM,motor4PWM,motor1Overcurrent,motor2Overcurrent,motor3Overcurrent,motor4Overcurrent,sensor1,sensor2,sensor3,sensor4,sensor5,sensor6,sensor7,sensor8,relay1,relay2,relay3,relay4,relay5,relay6,relay7,relay8,relay1Error,relay2Error,relay3Error,relay4Error,relay5Error,relay6Error,relay7Error,relay8Error,servoMotor1,servoMotor2,servoMotor3,servoMotor4,mixingCamera

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cart, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motor1Speed is None:
        self.motor1Speed = 0.
      if self.motor2Speed is None:
        self.motor2Speed = 0.
      if self.motor3Speed is None:
        self.motor3Speed = 0.
      if self.motor4Speed is None:
        self.motor4Speed = 0.
      if self.motor1Error is None:
        self.motor1Error = False
      if self.motor2Error is None:
        self.motor2Error = False
      if self.motor3Error is None:
        self.motor3Error = False
      if self.motor4Error is None:
        self.motor4Error = False
      if self.motor1PWM is None:
        self.motor1PWM = 0.
      if self.motor2PWM is None:
        self.motor2PWM = 0.
      if self.motor3PWM is None:
        self.motor3PWM = 0.
      if self.motor4PWM is None:
        self.motor4PWM = 0.
      if self.motor1Overcurrent is None:
        self.motor1Overcurrent = False
      if self.motor2Overcurrent is None:
        self.motor2Overcurrent = False
      if self.motor3Overcurrent is None:
        self.motor3Overcurrent = False
      if self.motor4Overcurrent is None:
        self.motor4Overcurrent = False
      if self.sensor1 is None:
        self.sensor1 = False
      if self.sensor2 is None:
        self.sensor2 = False
      if self.sensor3 is None:
        self.sensor3 = False
      if self.sensor4 is None:
        self.sensor4 = False
      if self.sensor5 is None:
        self.sensor5 = False
      if self.sensor6 is None:
        self.sensor6 = False
      if self.sensor7 is None:
        self.sensor7 = False
      if self.sensor8 is None:
        self.sensor8 = False
      if self.relay1 is None:
        self.relay1 = False
      if self.relay2 is None:
        self.relay2 = False
      if self.relay3 is None:
        self.relay3 = False
      if self.relay4 is None:
        self.relay4 = False
      if self.relay5 is None:
        self.relay5 = False
      if self.relay6 is None:
        self.relay6 = False
      if self.relay7 is None:
        self.relay7 = False
      if self.relay8 is None:
        self.relay8 = False
      if self.relay1Error is None:
        self.relay1Error = False
      if self.relay2Error is None:
        self.relay2Error = False
      if self.relay3Error is None:
        self.relay3Error = False
      if self.relay4Error is None:
        self.relay4Error = False
      if self.relay5Error is None:
        self.relay5Error = False
      if self.relay6Error is None:
        self.relay6Error = False
      if self.relay7Error is None:
        self.relay7Error = False
      if self.relay8Error is None:
        self.relay8Error = False
      if self.servoMotor1 is None:
        self.servoMotor1 = False
      if self.servoMotor2 is None:
        self.servoMotor2 = False
      if self.servoMotor3 is None:
        self.servoMotor3 = False
      if self.servoMotor4 is None:
        self.servoMotor4 = False
      if self.mixingCamera is None:
        self.mixingCamera = 0
    else:
      self.motor1Speed = 0.
      self.motor2Speed = 0.
      self.motor3Speed = 0.
      self.motor4Speed = 0.
      self.motor1Error = False
      self.motor2Error = False
      self.motor3Error = False
      self.motor4Error = False
      self.motor1PWM = 0.
      self.motor2PWM = 0.
      self.motor3PWM = 0.
      self.motor4PWM = 0.
      self.motor1Overcurrent = False
      self.motor2Overcurrent = False
      self.motor3Overcurrent = False
      self.motor4Overcurrent = False
      self.sensor1 = False
      self.sensor2 = False
      self.sensor3 = False
      self.sensor4 = False
      self.sensor5 = False
      self.sensor6 = False
      self.sensor7 = False
      self.sensor8 = False
      self.relay1 = False
      self.relay2 = False
      self.relay3 = False
      self.relay4 = False
      self.relay5 = False
      self.relay6 = False
      self.relay7 = False
      self.relay8 = False
      self.relay1Error = False
      self.relay2Error = False
      self.relay3Error = False
      self.relay4Error = False
      self.relay5Error = False
      self.relay6Error = False
      self.relay7Error = False
      self.relay8Error = False
      self.servoMotor1 = False
      self.servoMotor2 = False
      self.servoMotor3 = False
      self.servoMotor4 = False
      self.mixingCamera = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f4B4f32Bb().pack(_x.motor1Speed, _x.motor2Speed, _x.motor3Speed, _x.motor4Speed, _x.motor1Error, _x.motor2Error, _x.motor3Error, _x.motor4Error, _x.motor1PWM, _x.motor2PWM, _x.motor3PWM, _x.motor4PWM, _x.motor1Overcurrent, _x.motor2Overcurrent, _x.motor3Overcurrent, _x.motor4Overcurrent, _x.sensor1, _x.sensor2, _x.sensor3, _x.sensor4, _x.sensor5, _x.sensor6, _x.sensor7, _x.sensor8, _x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.relay1Error, _x.relay2Error, _x.relay3Error, _x.relay4Error, _x.relay5Error, _x.relay6Error, _x.relay7Error, _x.relay8Error, _x.servoMotor1, _x.servoMotor2, _x.servoMotor3, _x.servoMotor4, _x.mixingCamera))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 69
      (_x.motor1Speed, _x.motor2Speed, _x.motor3Speed, _x.motor4Speed, _x.motor1Error, _x.motor2Error, _x.motor3Error, _x.motor4Error, _x.motor1PWM, _x.motor2PWM, _x.motor3PWM, _x.motor4PWM, _x.motor1Overcurrent, _x.motor2Overcurrent, _x.motor3Overcurrent, _x.motor4Overcurrent, _x.sensor1, _x.sensor2, _x.sensor3, _x.sensor4, _x.sensor5, _x.sensor6, _x.sensor7, _x.sensor8, _x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.relay1Error, _x.relay2Error, _x.relay3Error, _x.relay4Error, _x.relay5Error, _x.relay6Error, _x.relay7Error, _x.relay8Error, _x.servoMotor1, _x.servoMotor2, _x.servoMotor3, _x.servoMotor4, _x.mixingCamera,) = _get_struct_4f4B4f32Bb().unpack(str[start:end])
      self.motor1Error = bool(self.motor1Error)
      self.motor2Error = bool(self.motor2Error)
      self.motor3Error = bool(self.motor3Error)
      self.motor4Error = bool(self.motor4Error)
      self.motor1Overcurrent = bool(self.motor1Overcurrent)
      self.motor2Overcurrent = bool(self.motor2Overcurrent)
      self.motor3Overcurrent = bool(self.motor3Overcurrent)
      self.motor4Overcurrent = bool(self.motor4Overcurrent)
      self.sensor1 = bool(self.sensor1)
      self.sensor2 = bool(self.sensor2)
      self.sensor3 = bool(self.sensor3)
      self.sensor4 = bool(self.sensor4)
      self.sensor5 = bool(self.sensor5)
      self.sensor6 = bool(self.sensor6)
      self.sensor7 = bool(self.sensor7)
      self.sensor8 = bool(self.sensor8)
      self.relay1 = bool(self.relay1)
      self.relay2 = bool(self.relay2)
      self.relay3 = bool(self.relay3)
      self.relay4 = bool(self.relay4)
      self.relay5 = bool(self.relay5)
      self.relay6 = bool(self.relay6)
      self.relay7 = bool(self.relay7)
      self.relay8 = bool(self.relay8)
      self.relay1Error = bool(self.relay1Error)
      self.relay2Error = bool(self.relay2Error)
      self.relay3Error = bool(self.relay3Error)
      self.relay4Error = bool(self.relay4Error)
      self.relay5Error = bool(self.relay5Error)
      self.relay6Error = bool(self.relay6Error)
      self.relay7Error = bool(self.relay7Error)
      self.relay8Error = bool(self.relay8Error)
      self.servoMotor1 = bool(self.servoMotor1)
      self.servoMotor2 = bool(self.servoMotor2)
      self.servoMotor3 = bool(self.servoMotor3)
      self.servoMotor4 = bool(self.servoMotor4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f4B4f32Bb().pack(_x.motor1Speed, _x.motor2Speed, _x.motor3Speed, _x.motor4Speed, _x.motor1Error, _x.motor2Error, _x.motor3Error, _x.motor4Error, _x.motor1PWM, _x.motor2PWM, _x.motor3PWM, _x.motor4PWM, _x.motor1Overcurrent, _x.motor2Overcurrent, _x.motor3Overcurrent, _x.motor4Overcurrent, _x.sensor1, _x.sensor2, _x.sensor3, _x.sensor4, _x.sensor5, _x.sensor6, _x.sensor7, _x.sensor8, _x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.relay1Error, _x.relay2Error, _x.relay3Error, _x.relay4Error, _x.relay5Error, _x.relay6Error, _x.relay7Error, _x.relay8Error, _x.servoMotor1, _x.servoMotor2, _x.servoMotor3, _x.servoMotor4, _x.mixingCamera))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 69
      (_x.motor1Speed, _x.motor2Speed, _x.motor3Speed, _x.motor4Speed, _x.motor1Error, _x.motor2Error, _x.motor3Error, _x.motor4Error, _x.motor1PWM, _x.motor2PWM, _x.motor3PWM, _x.motor4PWM, _x.motor1Overcurrent, _x.motor2Overcurrent, _x.motor3Overcurrent, _x.motor4Overcurrent, _x.sensor1, _x.sensor2, _x.sensor3, _x.sensor4, _x.sensor5, _x.sensor6, _x.sensor7, _x.sensor8, _x.relay1, _x.relay2, _x.relay3, _x.relay4, _x.relay5, _x.relay6, _x.relay7, _x.relay8, _x.relay1Error, _x.relay2Error, _x.relay3Error, _x.relay4Error, _x.relay5Error, _x.relay6Error, _x.relay7Error, _x.relay8Error, _x.servoMotor1, _x.servoMotor2, _x.servoMotor3, _x.servoMotor4, _x.mixingCamera,) = _get_struct_4f4B4f32Bb().unpack(str[start:end])
      self.motor1Error = bool(self.motor1Error)
      self.motor2Error = bool(self.motor2Error)
      self.motor3Error = bool(self.motor3Error)
      self.motor4Error = bool(self.motor4Error)
      self.motor1Overcurrent = bool(self.motor1Overcurrent)
      self.motor2Overcurrent = bool(self.motor2Overcurrent)
      self.motor3Overcurrent = bool(self.motor3Overcurrent)
      self.motor4Overcurrent = bool(self.motor4Overcurrent)
      self.sensor1 = bool(self.sensor1)
      self.sensor2 = bool(self.sensor2)
      self.sensor3 = bool(self.sensor3)
      self.sensor4 = bool(self.sensor4)
      self.sensor5 = bool(self.sensor5)
      self.sensor6 = bool(self.sensor6)
      self.sensor7 = bool(self.sensor7)
      self.sensor8 = bool(self.sensor8)
      self.relay1 = bool(self.relay1)
      self.relay2 = bool(self.relay2)
      self.relay3 = bool(self.relay3)
      self.relay4 = bool(self.relay4)
      self.relay5 = bool(self.relay5)
      self.relay6 = bool(self.relay6)
      self.relay7 = bool(self.relay7)
      self.relay8 = bool(self.relay8)
      self.relay1Error = bool(self.relay1Error)
      self.relay2Error = bool(self.relay2Error)
      self.relay3Error = bool(self.relay3Error)
      self.relay4Error = bool(self.relay4Error)
      self.relay5Error = bool(self.relay5Error)
      self.relay6Error = bool(self.relay6Error)
      self.relay7Error = bool(self.relay7Error)
      self.relay8Error = bool(self.relay8Error)
      self.servoMotor1 = bool(self.servoMotor1)
      self.servoMotor2 = bool(self.servoMotor2)
      self.servoMotor3 = bool(self.servoMotor3)
      self.servoMotor4 = bool(self.servoMotor4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f4B4f32Bb = None
def _get_struct_4f4B4f32Bb():
    global _struct_4f4B4f32Bb
    if _struct_4f4B4f32Bb is None:
        _struct_4f4B4f32Bb = struct.Struct("<4f4B4f32Bb")
    return _struct_4f4B4f32Bb
