# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_essentials_cpp/tower.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class tower(genpy.Message):
  _md5sum = "b2d3100de5c5a3b232c361555083996e"
  _type = "ros_essentials_cpp/tower"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool cartTtower_limit
bool towerTcart_limit
bool towerTsilo_limit
bool siloTtower_limit
int8 cartTtower_distance
int8 towerTcart_distance
int8 towerTsilo_distance
int8 siloTtower_distance"""
  __slots__ = ['cartTtower_limit','towerTcart_limit','towerTsilo_limit','siloTtower_limit','cartTtower_distance','towerTcart_distance','towerTsilo_distance','siloTtower_distance']
  _slot_types = ['bool','bool','bool','bool','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cartTtower_limit,towerTcart_limit,towerTsilo_limit,siloTtower_limit,cartTtower_distance,towerTcart_distance,towerTsilo_distance,siloTtower_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tower, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cartTtower_limit is None:
        self.cartTtower_limit = False
      if self.towerTcart_limit is None:
        self.towerTcart_limit = False
      if self.towerTsilo_limit is None:
        self.towerTsilo_limit = False
      if self.siloTtower_limit is None:
        self.siloTtower_limit = False
      if self.cartTtower_distance is None:
        self.cartTtower_distance = 0
      if self.towerTcart_distance is None:
        self.towerTcart_distance = 0
      if self.towerTsilo_distance is None:
        self.towerTsilo_distance = 0
      if self.siloTtower_distance is None:
        self.siloTtower_distance = 0
    else:
      self.cartTtower_limit = False
      self.towerTcart_limit = False
      self.towerTsilo_limit = False
      self.siloTtower_limit = False
      self.cartTtower_distance = 0
      self.towerTcart_distance = 0
      self.towerTsilo_distance = 0
      self.siloTtower_distance = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B4b().pack(_x.cartTtower_limit, _x.towerTcart_limit, _x.towerTsilo_limit, _x.siloTtower_limit, _x.cartTtower_distance, _x.towerTcart_distance, _x.towerTsilo_distance, _x.siloTtower_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.cartTtower_limit, _x.towerTcart_limit, _x.towerTsilo_limit, _x.siloTtower_limit, _x.cartTtower_distance, _x.towerTcart_distance, _x.towerTsilo_distance, _x.siloTtower_distance,) = _get_struct_4B4b().unpack(str[start:end])
      self.cartTtower_limit = bool(self.cartTtower_limit)
      self.towerTcart_limit = bool(self.towerTcart_limit)
      self.towerTsilo_limit = bool(self.towerTsilo_limit)
      self.siloTtower_limit = bool(self.siloTtower_limit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B4b().pack(_x.cartTtower_limit, _x.towerTcart_limit, _x.towerTsilo_limit, _x.siloTtower_limit, _x.cartTtower_distance, _x.towerTcart_distance, _x.towerTsilo_distance, _x.siloTtower_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.cartTtower_limit, _x.towerTcart_limit, _x.towerTsilo_limit, _x.siloTtower_limit, _x.cartTtower_distance, _x.towerTcart_distance, _x.towerTsilo_distance, _x.siloTtower_distance,) = _get_struct_4B4b().unpack(str[start:end])
      self.cartTtower_limit = bool(self.cartTtower_limit)
      self.towerTcart_limit = bool(self.towerTcart_limit)
      self.towerTsilo_limit = bool(self.towerTsilo_limit)
      self.siloTtower_limit = bool(self.siloTtower_limit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B4b = None
def _get_struct_4B4b():
    global _struct_4B4b
    if _struct_4B4b is None:
        _struct_4B4b = struct.Struct("<4B4b")
    return _struct_4B4b
